# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2019-08-31 15:40
from __future__ import unicode_literals

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('distributors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('auto_id',),
                'db_table': 'productss_asset',
                'verbose_name': 'asset',
                'verbose_name_plural': 'assets',
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'products_batch',
                'verbose_name': 'batch',
                'verbose_name_plural': 'batchs',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'products_brand',
                'verbose_name': 'brand',
                'verbose_name_plural': 'brands',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'products_category',
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('qty', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('new_qty', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-auto_id',),
                'db_table': 'product_inventory_adjustment',
                'verbose_name': 'product inventory adjustment',
                'verbose_name_plural': 'product inventory adjustments',
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustmentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('new_qty', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'product_inventory_adjustment_item',
                'verbose_name': 'product inventory adjustment item',
                'verbose_name_plural': 'product inventory adjustment items',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('code', models.CharField(max_length=18)),
                ('unit_type', models.CharField(choices=[('quantity', 'Quantity'), ('weight', 'Weight'), ('distance', 'Distance'), ('volume', 'Volume'), ('time', 'Time'), ('area', 'Area'), ('box', 'Box')], default='quantity', max_length=128)),
                ('unit_name', models.CharField(max_length=128)),
                ('is_base', models.BooleanField(default=False)),
                ('conversion_factor', models.DecimalField(decimal_places=4, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_system_generated', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('auto_id',),
                'db_table': 'products_measurement',
                'verbose_name': 'measurement',
                'verbose_name_plural': 'measurements',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('code', models.CharField(max_length=128)),
                ('hsn', models.CharField(blank=True, max_length=128, null=True)),
                ('net_weight', models.CharField(blank=True, max_length=128, null=True)),
                ('unit_type', models.CharField(choices=[('quantity', 'Quantity'), ('weight', 'Weight'), ('distance', 'Distance'), ('volume', 'Volume'), ('time', 'Time'), ('area', 'Area'), ('box', 'Box')], default='quantity', max_length=128)),
                ('stock', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('mrp', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('wholesale_price', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('wholesale_tax_excluded_price', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_excluded_price', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('best_before', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('packing_charge', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('low_stock_limit', models.PositiveIntegerField(default=1)),
                ('product_expiry_before', models.PositiveIntegerField(default=10)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_tax_included', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('auto_id',),
                'db_table': 'products_product',
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductAlternativeUnitPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('product',),
                'db_table': 'product_alternative_unit_price',
                'verbose_name': 'product alternative price',
                'verbose_name_plural': 'product alternative prices',
            },
        ),
        migrations.CreateModel(
            name='ProductBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('qty', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('product',),
                'db_table': 'product_batch',
                'verbose_name': 'product batch',
                'verbose_name_plural': 'product batches',
            },
        ),
        migrations.CreateModel(
            name='ProductBatchHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.DecimalField(decimal_places=2, default=0, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'product_batch_history',
                'verbose_name': 'product batch history',
                'verbose_name_plural': 'product batch histories',
            },
        ),
        migrations.CreateModel(
            name='ProductExpiryDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('batch_code', models.CharField(max_length=128)),
                ('manufacture_date', models.DateField(blank=True, null=True)),
                ('best_before', models.PositiveIntegerField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('period', models.CharField(choices=[('days', 'Days'), ('month', 'Month')], max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Product')),
            ],
            options={
                'ordering': ('product',),
                'db_table': 'products_expiry_date',
                'verbose_name': 'products_expiry_date',
                'verbose_name_plural': 'products_expiry_dates',
            },
        ),
        migrations.CreateModel(
            name='StockReturn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator_stockreturn_objects', to=settings.AUTH_USER_MODEL)),
                ('distributor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='distributors.Distributor')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Shop')),
                ('updator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='updator_stockreturn_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-auto_id',),
                'db_table': 'product_stock_return',
                'verbose_name': 'product stock return',
                'verbose_name_plural': 'product stock returns',
            },
        ),
        migrations.CreateModel(
            name='StockReturnItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('new_qty', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_deleted', models.BooleanField(default=False)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Product')),
                ('stock_return', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.StockReturn')),
            ],
            options={
                'db_table': 'product_stock_return_item',
                'verbose_name': 'product stock return item',
                'verbose_name_plural': 'product stock return items',
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_id', models.PositiveIntegerField(db_index=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('a_id', models.PositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('is_deleted', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Category')),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator_subcategory_objects', to=settings.AUTH_USER_MODEL)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Shop')),
                ('updator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='updator_subcategory_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'products_sub_category',
                'verbose_name': 'Sub category',
                'verbose_name_plural': 'Sub categories',
            },
        ),
    ]
